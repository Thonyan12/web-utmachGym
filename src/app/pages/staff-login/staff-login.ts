import { Component, OnInit } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AuthService } from '../../services/auth';

@Component({
  selector: 'app-staff-login',
  imports: [RouterLink, FormsModule, CommonModule],
  templateUrl: './staff-login.html',
  styleUrl: './staff-login.css'
})
export class StaffLogin implements OnInit {
  usuario = '';
  contrasenia = '';
  loading = false;
  error = '';

  constructor(private authService: AuthService, private router: Router) {}

  ngOnInit() {
    // Limpiar cualquier sesi√≥n anterior al cargar la p√°gina de login
    console.log('üßπ Limpiando sesi√≥n anterior...');
    this.authService.logout();
  }

  onSubmit() {
    if (!this.usuario || !this.contrasenia) {
      this.error = 'Por favor complete todos los campos';
      return;
    }

    this.loading = true;
    this.error = '';

    // Timeout de 10 segundos
    const timeoutId = setTimeout(() => {
      this.loading = false;
      this.error = '‚è±Ô∏è El servidor est√° tardando demasiado en responder. Por favor verifique:\n' +
                   '1. Que el backend est√© corriendo\n' +
                   '2. Que la base de datos PostgreSQL est√© activa\n' +
                   '3. Que los microservicios est√©n configurados correctamente';
    }, 10000);

    this.authService.login(this.usuario, this.contrasenia)
      .subscribe({
        next: (response) => {
          clearTimeout(timeoutId);
          this.loading = false;
          
          // ‚úÖ VALIDAR QUE SEA STAFF (admin o entrenador)
          if (response.user.rol === 'admin') {
            // ‚úÖ Es administrador ‚Üí va al √°rea admin
            this.router.navigate(['/admin/dashboard']);
          } else if (response.user.rol === 'entrenador') {
            // ‚úÖ Es entrenador ‚Üí va al √°rea entrenadores
            this.router.navigate(['/entrenadores/dashboard']);
          } else if (response.user.rol === 'miembro') {
            // ‚ùå Es un miembro, NO puede acceder al √°rea staff
            this.authService.logout(); // Limpiar token
            this.error = 'üö´ Acceso denegado. Usted es un miembro del gimnasio. Para acceder a su √°rea personal, use el bot√≥n "Miembro" en la p√°gina principal.';
          } else {
            // ‚ùå Rol desconocido
            this.authService.logout();
            this.error = 'Tipo de usuario no reconocido. Contacte al administrador.';
          }
        },
        error: (error) => {
          clearTimeout(timeoutId);
          this.loading = false;
          
          // üßπ IMPORTANTE: Limpiar tokens inv√°lidos
          this.authService.logout();
          
          // Manejo mejorado de errores
          if (error.status === 0) {
            this.error = '‚ùå No se pudo conectar con el servidor. Verifique que el backend est√© corriendo en http://localhost:3000';
          } else if (error.status === 408) {
            this.error = '‚è±Ô∏è Timeout: El servidor backend no responde. Verifique la conexi√≥n a la base de datos.';
          } else if (error.status === 401) {
            this.error = 'üîí Credenciales incorrectas. Verifique su usuario y contrase√±a.';
          } else {
            this.error = error.error?.message || `Error ${error.status}: ${error.statusText}`;
          }
          
          console.error('Error completo:', error);
        }
      });
  }
}
